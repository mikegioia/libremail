#!/usr/bin/env php
<?php

/**
 * Sync Daemon
 *
 * This is the long-running daemon for managing the syncing engine.
 * Call this script to run "forever" and manage the possibly-memory
 * abusive sync and server scripts.
 */
use App\Command;
use App\Console\DaemonConsole;
use App\Daemon;
use App\Diagnostics;
use App\Events\MessageEvent;
use App\Exceptions\Terminate as TerminateException;
use App\Log;
use App\Message;
use App\Model;
use App\Startup;
use MKraemer\ReactPCNTL\PCNTL;
use Pb\PDO\Database;
use Pimple\Container;
use React\ChildProcess\Process;
use React\EventLoop\Factory;
use Symfony\Component\EventDispatcher\Event;
use Symfony\Component\EventDispatcher\EventDispatcher as Emitter;

// Update internals
set_time_limit(0);
date_default_timezone_set('UTC');

// Load the vendor libraries
require __DIR__.'/vendor/autoload.php';

// Load application constants
require __DIR__.'/config/constants.php';

// Load configuration files and parse the CLI arguments
$default = parse_ini_file(BASEPATH.'/config/default.ini', true);
$local = parse_ini_file(BASEPATH.'/config/local.ini', true);
$config = array_replace_recursive($default, $local);

// Set the memory limit from the config
ini_set('memory_limit', $config['app']['memory']);

// Set up dependency container and register all services
$di = new Container();

// Store the configuration as a service
$di['config'] = $config;

// Console/CLI service
$di['console'] = new DaemonConsole();
$di['cli'] = function ($c) {
    return $c['console']->getCLI();
};

// Logging service
$di['log'] = function ($c) {
    return new Log(
        $c['cli'],
        $c['config']['daemonlog'],
        false
    );
};

// Initialize the error and exception handlers
$di['log']->init();

// Parse the CLI
$di['console']->init();

// Set up the event dispatcher
$di['emitter'] = new Emitter();

// React event loop, used for child-process and web socket
// server (Ratchet).
$di['loop'] = Factory::create();

// Set up the command handler
$di['command'] = new Command($di['emitter']);

// Statically set Message logging service
Message::setLog($di['log']->getLogger());

// Set up the signal handler to shutdown
$TERMINATE = function () {
    throw new TerminateException();
};

// Graceful shutdown
$HALT = function () use ($di) {
    if (isset($di['daemon']) && $di['daemon']) {
        $di['daemon']->halt();
    }
};

// Set up process handler bindings for React
$pcntl = new PCNTL($di['loop']);
$pcntl->on(SIGHUP, $TERMINATE);
$pcntl->on(SIGINT, $TERMINATE);
$pcntl->on(SIGTERM, $TERMINATE);
$pcntl->on(SIGQUIT, $TERMINATE);

// Daemon manages the sync and websocket processes
$di['daemon'] = new Daemon(
    $di['log'],
    $di['loop'],
    $di['emitter'],
    $di['console'],
    $di['command'],
    $config['daemon']
);

// Diagnostic test service
$di['diagnostics'] = function ($container) {
    return new Diagnostics($container);
};

// This event is fired to start or restart the sync process.
$di['emitter']->addListener(
    EV_START_SYNC,
    function (Event $event) use ($di) {
        $di['daemon']->startSync();
    });

// This event is fired to start or restart the server process.
$di['emitter']->addListener(
    EV_START_SERVER,
    function (Event $event) use ($di) {
        $di['daemon']->startWebServer();
    });

// This event is fired to stop the sync process.
$di['emitter']->addListener(
    EV_STOP_SYNC,
    function (Event $event) use ($di) {
        $di['daemon']->stopSync();
    });

// Fired when the sync is terminated for any reason. This is
// where we can restart the script or terminate gracefully.
// During restart, we want to incorporate some form of
// exponential back-off. Attempt to restart quickly but slow
// down over time.
$di['emitter']->addListener(
    EV_SYNC_EXITED,
    function (Event $event) use ($di) {
        // We want to trigger this after a grace period, and
        // with an increasing decay.
        $di['daemon']->restartWithDecay(PROC_SYNC, EV_START_SYNC);
    });

// Fired when the server is terminated for any reason.
$di['emitter']->addListener(
    EV_SERVER_EXITED,
    function (Event $event) use ($di) {
        $di['daemon']->restartWithDecay(PROC_SERVER, EV_START_SERVER);
    });

// Triggered to update the stats to all websocket connections
$di['emitter']->addListener(
    EV_BROADCAST_MSG,
    function (MessageEvent $event) use ($di) {
        $di['daemon']->broadcast($event->getMessage());
    });

// Triggered to wake up a sleeping sync process
$di['emitter']->addListener(
    EV_CONTINUE_SYNC,
    function (Event $event) use ($di) {
        $di['daemon']->continueSync();
    });

// Triggered to send stats update (SIGUSR2)
$di['emitter']->addListener(
    EV_POLL_STATS,
    function (Event $event) use ($di) {
        $di['daemon']->pollStats();
    });

// Sends a health report about the sync/server processes
$di['emitter']->addListener(
    EV_POLL_DAEMON,
    function (Event $event) use ($di) {
        $di['daemon']->broadcastHealth();
    });

// Trigger the events to load the timers
$di['emitter']->dispatch(EV_START_SYNC);
$di['emitter']->dispatch(EV_START_SERVER);

// PDO factory, this uses a wrapper around PDO
$di['db_factory'] = $di->factory(function ($container, $config = null) {
    $dbConfig = $config ?: $container['config']['sql'];
    $dsn = sprintf(
        'mysql:host=%s;dbname=%s;charset=%s',
        $dbConfig['hostname'],
        $dbConfig['database'],
        $dbConfig['charset']
    );

    try {
        $db = new Database(
            $dsn,
            $dbConfig['username'],
            $dbConfig['password']
        );
        $db->query('SET SESSION wait_timeout = 28800;');
        $db->query('SET NAMES '.$dbConfig['charset'].';');

        return $db;
    } catch (PDOException $e) {
        $message = sprintf('%s. %s: %s',
            'There was a problem connecting to the database',
            'Are you sure it exists? Here are the details',
            $e->getMessage()
        );

        throw new TerminateException($message);
    }
});

// Run the diagnostic tests. If specified from the CLI, then
// output the results to the console and exit.
$di['diagnostics']->run();

// PDO connection. This attempts to connect to the database.
// If it fails here, the script will halt.
$di['db'] = $di['db_factory'];

// Statically set the services in the base model
Model::setDb($di['db']);
Model::setCLI($di['cli']);
Model::setConfig($di['config']);
Model::setLog($di['log']->getLogger());

try {
    // Kick off the server application
    $startup = new Startup($di);
    $startup->runLibreMail();

    // Run the loop until we hit a halt signal
    runLoop:

    $di['loop']->stop();
    $di['loop']->run();
} catch (TerminateException $e) {
    // Gracefully exit if we're terminated
    $di['log']->getLogger()->addInfo($e->getMessage());
    $HALT();
} catch (Exception $e) {
    // Unhandled exceptions
    $di['log']->displayError($e);
    $HALT();
}
