#!/usr/bin/env php
<?php

/**
 * WebSocket Server
 *
 * This is the websocket server for the web front-end to
 * connect to. This process can be run standalone, manually
 * or (more commonly) it's invoked via the daemon script.
 */
use App\Log;
use App\Model;
use App\Daemon;
use App\Message;
use App\Startup;
use App\Constants;
use App\RatchetApp;
use App\Diagnostics;
use Pb\PDO\Database;
use Pimple\Container;
use App\Server\WebServer;
use App\Server\StatsServer;
use Exception as Exception;
use React\EventLoop\Factory;
use App\Console\ServerConsole;
use MKraemer\ReactPCNTL\PCNTL;
use PDOException as PDOException;
use Symfony\Component\Routing\Route;
use App\Exceptions\Terminate as TerminateException;

// Set up paths and constants
set_time_limit(0);
define('BASEPATH', __DIR__);
date_default_timezone_set('UTC');

// Load the vendor libraries
if (file_exists($a = getcwd() . '/vendor/autoload.php')) {
    require $a;
} elseif (file_exists($a = __DIR__ . '/../../../autoload.php')) {
    require $a;
} elseif (file_exists($a = __DIR__ . '/../vendor/autoload.php')) {
    require $a;
} elseif (file_exists($a = BASEPATH.'/vendor/autoload.php')) {
    require $a;
} else {
    fwrite(STDERR, 'Cannot locate autoloader; please run "composer install"' . PHP_EOL);
    exit(1);
}

// Load configuration files and parse the CLI arguments
$constants = parse_ini_file(BASEPATH.'/config/constants.ini', false);
$default = parse_ini_file(BASEPATH.'/config/default.ini', true);
$local = parse_ini_file(BASEPATH.'/config/local.ini', true);
$config = array_replace_recursive($default, $local);
Constants::process($constants);
unset($constants);

// Set the memory limit from the config
ini_set('memory_limit', $config['app']['memory']);

// Set up dependency container and register all services
$di = new Container;

// Store the configuration as a service
$di['config'] = $config;

// Diagnostic test service
$di['diagnostics'] = function ($container) {
    return new Diagnostics($container);
};

// Console/CLI service
$di['console'] = new ServerConsole($config);
$di['cli'] = function ($container) {
    return $container['console']->getCLI();
};

// Logging service
$di['log'] = function ($container) {
    return new Log(
        $container['cli'],
        $container['config']['serverlog'],
        true === $container['console']->interactive
    );
};

// Initialize the error and exception handlers
$di['log']->init();

// Parse the CLI
$di['console']->init();

// Boot the diagnostics service
$di['diagnostics']->init();

// React event loop, used for Ratchet.
$di['loop'] = Factory::create();

// Statically set the services in the base model
Model::setCLI($di['cli']);
Model::setConfig($di['config']);
Model::setLog($di['log']->getLogger());

// Set Message service
Message::setLog($di['log']->getLogger());

// Set up the signal handler to shutdown
$HALT = function () use ($di) {
    if (isset($di['loop']) && $di['loop']) {
        $di['loop']->stop();
    }

    throw new TerminateException;
};

// Set up process handler bindings for React
$pcntl = new PCNTL($di['loop']);
$pcntl->on(SIGHUP, $HALT);
$pcntl->on(SIGINT, $HALT);
$pcntl->on(SIGTERM, $HALT);
$pcntl->on(SIGQUIT, $HALT);

// PDO factory, this uses a wrapper around PDO
$di['db_factory'] = $di->factory(function ($container, $config = null) {
    $dbConfig = ($config) ?: $container['config']['sql'];
    $dsn = sprintf(
        'mysql:host=%s;dbname=%s;charset=%s',
        $dbConfig['hostname'],
        $dbConfig['database'],
        $dbConfig['charset']
    );

    try {
        return new Database(
            $dsn,
            $dbConfig['username'],
            $dbConfig['password']
        );
    } catch (PDOException $e) {
        throw new PDOException(
            'There was a problem connecting to the database. '.
            'Are you sure it exists? Here are the details: '.
            $e->getMessage()
        );
    }
});

// Create a new socket server handler
$di['server.web'] = new WebServer($di['log']);
$di['server.stats'] = new StatsServer($di['log'], $di['loop']);

// Ratchet web server instance
$di['ratchet'] = new RatchetApp(
    $config['server']['host'],
    $config['server']['port'],
    $config['server']['address'],
    $di['loop']
);

// Socket route
$di['ratchet']->route(
    ENDPOINT_STATS,
    $di['server.stats'],
    $config['server']['allowed_origins']
);

// Web route
$di['ratchet']->route(
    ENDPOINT_WEB,
    $di['server.web'],
    $config['server']['allowed_origins']
);

// Catch-all route
$di['ratchet']->route(
    new Route('/{any}', [], ['any' => '.*']),
    $di['server.web'],
    $config['server']['allowed_origins']
);

// Run the loop until we hit a halt signal
try {
    // This sets the entire dependency container into the
    // model class as a static reference. Whenever the db()
    // is requested, a new connection will be made.
    Model::setDbFactory($di);

    // Kick off the server application
    $startup = new Startup($di);
    $startup->runServer();

    runServerLoop:

    $di['loop']->stop();
    $di['ratchet']->run();
} catch (PDOException $e) {
    // Uncaught PDO exceptions, this should only be the
    // connection error
    Diagnostics::checkDatabaseException($di, $e, true);
    goto runServerLoop;
} catch (TerminateException $e) {
    // Gracefully exit if we're terminated
    $di['log']->getLogger()->addInfo($e->getMessage());
    exit(0);
} catch (Exception $e) {
    // Unhandled exceptions
    $di['log']->displayError($e);
}
